import fs from 'node:fs';
import path from 'node:path';
import { URL } from 'node:url';
import { send } from 'vite';
import picomatch from 'picomatch';
import { compilePug } from './pug.js';
const middleware = (settings, server) => {
    const { options, locals, ignorePattern } = settings;
    const ignoreMatcher = ignorePattern ? picomatch(ignorePattern) : null;
    return async (req, res, next) => {
        if (!req.url ||
            req.url.startsWith('/@') ||
            req.url.startsWith('/__inspect/'))
            return next();
        const url = new URL(req.url, 'relative:///').pathname;
        if (ignoreMatcher && ignoreMatcher(url))
            return next();
        const reqAbsPath = path.posix.join(server.config.root, url, url.endsWith('/') ? 'index.html' : '');
        const parsedReqAbsPath = path.posix.parse(reqAbsPath);
        if (parsedReqAbsPath.ext !== '.html')
            return next();
        if (fs.existsSync(reqAbsPath))
            return next();
        const pugAbsPath = path.posix.format({
            dir: parsedReqAbsPath.dir,
            name: parsedReqAbsPath.name,
            ext: '.pug',
        });
        if (!fs.existsSync(pugAbsPath))
            return send(req, res, '404 Not Found', 'html', {});
        const compileResult = await compilePug(server.moduleGraph, url, pugAbsPath, options, locals);
        if (compileResult instanceof Error)
            return next(compileResult);
        const transformResult = await server.transformRequest(url, {
            html: true,
        });
        if (transformResult) {
            const html = await server.transformIndexHtml(url, transformResult.code);
            return send(req, res, html, 'html', {});
        }
        return next(new Error('An unexpected error has occurred.'));
    };
};
export const vitePluginPugServe = (settings) => {
    const { reload } = settings;
    let server;
    return {
        name: 'vite-plugin-pug-serve',
        enforce: 'pre',
        apply: 'serve',
        configureServer(_server) {
            server = _server;
            server.middlewares.use(middleware(settings, server));
        },
        handleHotUpdate(context) {
            const fileModules = server.moduleGraph.getModulesByFile(context.file);
            if (fileModules) {
                fileModules.forEach((fileModule) => {
                    fileModule.importers.forEach((importer) => {
                        if (importer.file && path.extname(importer.file) === '.pug')
                            server.moduleGraph.invalidateModule(importer);
                    });
                });
            }
            if (reload !== false) {
                context.server.ws.send({ type: 'full-reload' });
            }
        },
    };
};
